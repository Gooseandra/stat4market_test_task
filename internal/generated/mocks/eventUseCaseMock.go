// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Goose\GolandProjects\test_task_stat4market\internal\envents\usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	"test_task_stat4market/internal/generated/models"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetEventByDay mocks base method.
func (m *MockUseCase) GetEventByDay(day string) ([]*models.EventDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByDay", day)
	ret0, _ := ret[0].([]*models.EventDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByDay indicates an expected call of GetEventByDay.
func (mr *MockUseCaseMockRecorder) GetEventByDay(day interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByDay", reflect.TypeOf((*MockUseCase)(nil).GetEventByDay), day)
}

// GetEventByTypeAndDate mocks base method.
func (m *MockUseCase) GetEventByTypeAndDate(date, eventType string) ([]*models.EventDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByTypeAndDate", date, eventType)
	ret0, _ := ret[0].([]*models.EventDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByTypeAndDate indicates an expected call of GetEventByTypeAndDate.
func (mr *MockUseCaseMockRecorder) GetEventByTypeAndDate(date, eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByTypeAndDate", reflect.TypeOf((*MockUseCase)(nil).GetEventByTypeAndDate), date, eventType)
}

// GetEventTypesByEventValue mocks base method.
func (m *MockUseCase) GetEventTypesByEventValue(value int) ([]*models.EventType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventTypesByEventValue", value)
	ret0, _ := ret[0].([]*models.EventType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventTypesByEventValue indicates an expected call of GetEventTypesByEventValue.
func (mr *MockUseCaseMockRecorder) GetEventTypesByEventValue(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventTypesByEventValue", reflect.TypeOf((*MockUseCase)(nil).GetEventTypesByEventValue), value)
}

// GetUserByUniqueEventTypesValue mocks base method.
func (m *MockUseCase) GetUserByUniqueEventTypesValue(value int) ([]*models.UserDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUniqueEventTypesValue", value)
	ret0, _ := ret[0].([]*models.UserDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUniqueEventTypesValue indicates an expected call of GetUserByUniqueEventTypesValue.
func (mr *MockUseCaseMockRecorder) GetUserByUniqueEventTypesValue(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUniqueEventTypesValue", reflect.TypeOf((*MockUseCase)(nil).GetUserByUniqueEventTypesValue), value)
}

// NewEvent mocks base method.
func (m *MockUseCase) NewEvent(event models.NewEventRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewEvent indicates an expected call of NewEvent.
func (mr *MockUseCaseMockRecorder) NewEvent(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEvent", reflect.TypeOf((*MockUseCase)(nil).NewEvent), event)
}
