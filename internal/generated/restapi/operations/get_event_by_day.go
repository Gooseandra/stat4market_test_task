// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetEventByDayHandlerFunc turns a function with the right signature into a get event by day handler
type GetEventByDayHandlerFunc func(GetEventByDayParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetEventByDayHandlerFunc) Handle(params GetEventByDayParams) middleware.Responder {
	return fn(params)
}

// GetEventByDayHandler interface for that can handle valid get event by day params
type GetEventByDayHandler interface {
	Handle(GetEventByDayParams) middleware.Responder
}

// NewGetEventByDay creates a new http.Handler for the get event by day operation
func NewGetEventByDay(ctx *middleware.Context, handler GetEventByDayHandler) *GetEventByDay {
	return &GetEventByDay{Context: ctx, Handler: handler}
}

/*
	GetEventByDay swagger:route GET /events/day/{day} getEventByDay

# Получить события за день

Возвращает список событий, произошедших в указанный день
*/
type GetEventByDay struct {
	Context *middleware.Context
	Handler GetEventByDayHandler
}

func (o *GetEventByDay) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetEventByDayParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
