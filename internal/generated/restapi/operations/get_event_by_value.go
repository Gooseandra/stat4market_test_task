// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetEventByValueHandlerFunc turns a function with the right signature into a get event by value handler
type GetEventByValueHandlerFunc func(GetEventByValueParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetEventByValueHandlerFunc) Handle(params GetEventByValueParams) middleware.Responder {
	return fn(params)
}

// GetEventByValueHandler interface for that can handle valid get event by value params
type GetEventByValueHandler interface {
	Handle(GetEventByValueParams) middleware.Responder
}

// NewGetEventByValue creates a new http.Handler for the get event by value operation
func NewGetEventByValue(ctx *middleware.Context, handler GetEventByValueHandler) *GetEventByValue {
	return &GetEventByValue{Context: ctx, Handler: handler}
}

/*
	GetEventByValue swagger:route GET /events/value/{value} getEventByValue

# Получить типы событий по значению

Возвращает список типов событий с указанным значением
*/
type GetEventByValue struct {
	Context *middleware.Context
	Handler GetEventByValueHandler
}

func (o *GetEventByValue) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetEventByValueParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
