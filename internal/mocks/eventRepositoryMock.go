// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Goose\GolandProjects\test_task_stat4market\internal\envents\repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "test_task_stat4market/models"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetEventByDayRepo mocks base method.
func (m *MockRepository) GetEventByDayRepo(dayStart, dayEnd time.Time) ([]*models.EventDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByDayRepo", dayStart, dayEnd)
	ret0, _ := ret[0].([]*models.EventDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByDayRepo indicates an expected call of GetEventByDayRepo.
func (mr *MockRepositoryMockRecorder) GetEventByDayRepo(dayStart, dayEnd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByDayRepo", reflect.TypeOf((*MockRepository)(nil).GetEventByDayRepo), dayStart, dayEnd)
}

// GetEventByTypeAndDateRepo mocks base method.
func (m *MockRepository) GetEventByTypeAndDateRepo(dayStart, dayEnd time.Time, eventType string) ([]*models.EventDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByTypeAndDateRepo", dayStart, dayEnd, eventType)
	ret0, _ := ret[0].([]*models.EventDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByTypeAndDateRepo indicates an expected call of GetEventByTypeAndDateRepo.
func (mr *MockRepositoryMockRecorder) GetEventByTypeAndDateRepo(dayStart, dayEnd, eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByTypeAndDateRepo", reflect.TypeOf((*MockRepository)(nil).GetEventByTypeAndDateRepo), dayStart, dayEnd, eventType)
}

// GetEventTypesByEventValueRepo mocks base method.
func (m *MockRepository) GetEventTypesByEventValueRepo(value int) ([]*models.EventType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventTypesByEventValueRepo", value)
	ret0, _ := ret[0].([]*models.EventType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventTypesByEventValueRepo indicates an expected call of GetEventTypesByEventValueRepo.
func (mr *MockRepositoryMockRecorder) GetEventTypesByEventValueRepo(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventTypesByEventValueRepo", reflect.TypeOf((*MockRepository)(nil).GetEventTypesByEventValueRepo), value)
}

// GetUserByUniqueEventTypesValueRepo mocks base method.
func (m *MockRepository) GetUserByUniqueEventTypesValueRepo(value int) ([]*models.UserDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUniqueEventTypesValueRepo", value)
	ret0, _ := ret[0].([]*models.UserDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUniqueEventTypesValueRepo indicates an expected call of GetUserByUniqueEventTypesValueRepo.
func (mr *MockRepositoryMockRecorder) GetUserByUniqueEventTypesValueRepo(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUniqueEventTypesValueRepo", reflect.TypeOf((*MockRepository)(nil).GetUserByUniqueEventTypesValueRepo), value)
}

// NewEventRepo mocks base method.
func (m *MockRepository) NewEventRepo(event models.NewEventRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEventRepo", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewEventRepo indicates an expected call of NewEventRepo.
func (mr *MockRepositoryMockRecorder) NewEventRepo(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEventRepo", reflect.TypeOf((*MockRepository)(nil).NewEventRepo), event)
}
